const canvas = document.getElementById('gl-canvas');
const gl = canvas.getContext('webgl2');

gl.clearColor(0, 1, 1, 1);
gl.clear(gl.COLOR_BUFFER_BIT);

//Shader para posiciones
const vertexShader = `#version 300 es
precision mediump float;

in vec2 position;
in vec3 color;
out vec3 vColor;

void main()
{
    gl_Position = vec4(position, 0, 1);
    vColor = color;
}
`;

//Shader para color
const fragmentShader = `#version 300 es
precision mediump float;

out vec4 fragColor;
in vec3 vColor;

void main()
{
    fragColor = vec4(vColor, 1);
}
`;

const vs = gl.createShader(gl.VERTEX_SHADER);
const fs = gl.createShader(gl.FRAGMENT_SHADER);

gl.shaderSource(vs, vertexShader);
gl.shaderSource(fs, fragmentShader);

gl.compileShader(vs);
gl.compileShader(fs);

if(!gl.getShaderParameter(vs, gl.COMPILE_STATUS))
{
    console.error(gl.getShaderInfoLog(vs));
}

if(!gl.getShaderParameter(fs, gl.COMPILE_STATUS))
{
    console.error(gl.getShaderInfoLog(fs));
}

const program = gl.createProgram();
gl.attachShader(program, vs);
gl.attachShader(program, fs);
gl.linkProgram(program);

if(!gl.getProgramParameter(program, gl.LINK_STATUS))
{
    console.error(gl.getProgramInfoLog(program));
}

gl.useProgram(program);

//Dibujo de triangulo basico
const triangleCoords = [
    //Bracito izquierdo
    0.9, -0.1,
    0.9, 0.2,
    0.8, -0.1,
    0.8, -0.1,
    0.8, 0.2,
    0.9, 0.2,
    
    0.8, -0.1,
    0.8, -0.2,
    0.7, -0.1,
    0.7, -0.1,
    0.7, -0.2,
    0.8, -0.2,

    //Pierna izq
    0.7, 0.0,
    0.7, -0.4,
    0.6, 0.0,
    0.6, 0.0,
    0.6, -0.4,
    0.7, -0.4,

    0.6, -0.4,
    0.6, -0.5,
    0.3, -0.4,
    0.3, -0.4,
    0.3, -0.5,
    0.6, -0.5,

    0.3, -0.4,
    -0.3, -0.4,
    -0.3, -0.3,
    -0.3, -0.3,
    0.3, -0.3,
    0.3, -0.4,

    //Pierna der
    -0.3, -0.4,
    -0.3, -0.5,
    -0.6, -0.4,
    -0.6, -0.4,
    -0.6, -0.5,
    -0.3, -0.5,

    -0.6, -0.4,
    -0.6, 0.0,
    -0.7, 0.0,
    -0.7, 0.0,
    -0.7, -0.4,
    -0.6, -0.4,

    //Brazo der
    -0.7, -0.1,
    -0.7, -0.2,
    -0.8, -0.2,
    -0.8, -0.2,
    -0.8, -0.1,
    -0.7, -0.1,

    -0.8, -0.1,
    -0.9, -0.1,
    -0.9, 0.2,
    -0.9, 0.2,
    -0.8, 0.2,
    -0.8, -0.1,

    //cabeza
    -0.8, 0.2,
    -0.7, 0.2,
    -0.7, 0.5,
    -0.7, 0.5,
    -0.8, 0.5,
    -0.8, 0.2,

    -0.7, 0.5,
    -0.6, 0.5,
    -0.6, 0.7,
    -0.6, 0.7,
    -0.7, 0.7,
    -0.7, 0.5,
    
    -0.6, 0.7,
    -0.5, 0.7,
    -0.6, 0.8,
    -0.6, 0.8,
    -0.5, 0.7,
    -0.5, 0.8,

    -0.5, 0.8,
    -0.2, 0.8,
    -0.5, 0.9,
    -0.5, 0.9,
    -0.2, 0.8,
    -0.2, 0.9,

    -0.2, 0.9,
    -0.2, 1.0,
    0.2, 1.0,
    0.2, 1.0,
    0.2, 0.9,
    -0.2, 0.9,

    0.2, 0.9,
    0.2, 0.8,
    0.5, 0.9,
    0.2, 0.8,
    0.5, 0.8,
    0.5, 0.9,

    0.5, 0.8,
    0.5, 0.7,
    0.6, 0.8,
    0.6, 0.8,
    0.5, 0.7,
    0.6, 0.7,

    0.6, 0.7,
    0.7, 0.7,
    0.6, 0.5,
    0.6, 0.5,
    0.7, 0.5,
    0.7, 0.7,

    0.7, 0.5,
    0.7, 0.2,
    0.8, 0.5,
    0.8, 0.5,
    0.8, 0.2,
    0.7, 0.2,

    //Pie izq
    0.6, -0.4,
    0.6, -0.3,
    0.3, -0.3,
    0.3, -0.3,
    0.3, -0.4,
    0.6, -0.4,

    //Pie der
    -0.3, -0.4,
    -0.6, -0.3,
    -0.3, -0.3,
    -0.6, -0.3,
    -0.3, -0.4,
    -0.6, -0.4,

    //Piquito
    0.2, 0.2,
    0.2, 0.1,
    -0.2, 0.2,
    -0.2, 0.2,
    -0.2, 0.1,
    0.2, 0.1,

    0.1, 0.1,
    0.1, 0.0,
    -0.1, 0.1,
    -0.1, 0.1,
    -0.1, 0.0,
    0.1, 0.0,

    //Ojos
    0.1, 0.2,
    0.3, 0.2,
    0.3, 0.3,
    0.3, 0.3,
    0.1, 0.3,
    0.1, 0.2,

    0.3, 0.3,
    0.3, 0.4,
    0.2, 0.3,
    0.2, 0.3,
    0.2, 0.4,
    0.3, 0.4,

    0.1, 0.3,
    0.1, 0.4,
    0.2, 0.3,
    0.2, 0.3,
    0.2, 0.4,
    0.1, 0.4,

    -0.1, 0.2,
    -0.3, 0.2,
    -0.3, 0.3,
    -0.3, 0.3,
    -0.1, 0.3,
    -0.1, 0.2,

    -0.3, 0.3,
    -0.3, 0.4,
    -0.2, 0.3,
    -0.2, 0.3,
    -0.2, 0.4,
    -0.3, 0.4,

    -0.1, 0.3,
    -0.1, 0.4,
    -0.2, 0.3,
    -0.2, 0.3,
    -0.2, 0.4,
    -0.1, 0.4,

    //Pecho
    0.6, -0.3,
    0.6, 0.0,
    -0.6, -0.3,
    -0.6, -0.3,
    -0.6, 0.0,
    0.6, 0.0,

    //Relleno cabeza
    0.3, 0.7,
    0.3, 0.4,
    -0.3, 0.7,
    -0.3, 0.7,
    -0.3, 0.4,
    0.3, 0.4,

    0.1, 0.4,
    0.1, 0.2,
    -0.1, 0.2,
    -0.1, 0.2,
    -0.1, 0.4,
    0.1, 0.4,

    0.3, 0.6,
    0.3, -0.1,
    0.5, -0.1,
    0.5, -0.1,
    0.5, 0.6,
    0.3, 0.6,
    
    -0.3, 0.6,
    -0.3, -0.1,
    -0.5, -0.1,
    -0.5, -0.1,
    -0.5, 0.6,
    -0.3, 0.6,

    0.5, 0.4,
    0.6, 0.4,
    0.5, -0.2,
    0.5, -0.2,
    0.6, -0.2,
    0.6, 0.4,

    -0.5, 0.4,
    -0.6, 0.4,
    -0.5, -0.2,
    -0.5, -0.2,
    -0.6, -0.2,
    -0.6, 0.4,

    0.3, 0.2,
    0.3, 0.1,
    0.2, 0.1,
    0.2, 0.1,
    0.2, 0.2,
    0.3, 0.2,

    -0.3, 0.2,
    -0.3, 0.1,
    -0.2, 0.1,
    -0.2, 0.1,
    -0.2, 0.2,
    -0.3, 0.2,

    0.1, 0.1,
    0.1, 0.0,
    0.3, 0.1,
    0.3, 0.1,
    0.3, 0.0,
    0.1, 0.0,

    -0.1, 0.1,
    -0.1, 0.0,
    -0.3, 0.1,
    -0.3, 0.1,
    -0.3, 0.0,
    -0.1, 0.0,

    0.6, 0.0,
    0.7, 0.0,
    0.6, 0.5,
    0.6, 0.5,
    0.7, 0.5,
    0.7, 0.0,

    -0.6, 0.0,
    -0.7, 0.0,
    -0.6, 0.5,
    -0.6, 0.5,
    -0.7, 0.5,
    -0.7, 0.0,

    0.7, 0.2,
    0.8, 0.2, 
    0.7, -0.1,
    0.7, -0.1,
    0.8, -0.1,
    0.8, 0.2,

    -0.7, 0.2,
    -0.8, 0.2, 
    -0.7, -0.1,
    -0.7, -0.1,
    -0.8, -0.1,
    -0.8, 0.2,

    0.5, 0.4,
    0.6, 0.4,
    0.5, 0.7,
    0.5, 0.7,
    0.6, 0.7,
    0.6, 0.4,

    -0.5, 0.4,
    -0.6, 0.4,
    -0.5, 0.7,
    -0.5, 0.7,
    -0.6, 0.7,
    -0.6, 0.4,

    0.5, 0.6,
    0.3, 0.6,
    0.5, 0.8,
    0.5, 0.8,
    0.3, 0.8,
    0.3, 0.6,

    -0.5, 0.6,
    -0.3, 0.6,
    -0.5, 0.8,
    -0.5, 0.8,
    -0.3, 0.8,
    -0.3, 0.6,

    0.3, 0.7,
    0.3, 0.8,
    -0.3, 0.7,
    -0.3, 0.7,
    -0.3, 0.8,
    0.3, 0.8,

    0.2, 0.8,
    0.2, 0.9,
    -0.2, 0.8,
    -0.2, 0.8, 
    -0.2, 0.9,
    0.2, 0.9
];

const vertexColor = [
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,

    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,

    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,

    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,
    0.970, 0.719, 0.0291,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,
    0, 0, 0,

    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,

    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,
    1, 1, 1,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,
    0.0688, 0.570, 0.860,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,

    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
    0.155, 0.237, 0.970,
];

//Reservar memoria en la tarjeta de video (Vram)
const positionBuffer = gl.createBuffer();
const colorBuffer = gl.createBuffer();

//Posicion
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleCoords), gl.STATIC_DRAW);

const attribPosition = gl.getAttribLocation(program, 'position');
gl.enableVertexAttribArray(attribPosition);
gl.vertexAttribPointer(attribPosition, 2, gl.FLOAT, gl.FALSE, 0, 0);

//Color
gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexColor), gl.STATIC_DRAW);

const color = gl.getAttribLocation(program, 'color');
gl.enableVertexAttribArray(color);
gl.vertexAttribPointer(color, 3, gl.FLOAT, gl.FALSE, 0, 0);

gl.drawArrays(gl.TRIANGLES, 0, 294);